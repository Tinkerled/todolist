{"version":3,"sources":["components/TodoItem.js","components/Todos.js","components/AddTodo.js","components/layout/Header.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","getStyle","backgroundColor","padding","borderBottom","textDecoration","props","todo","completed","this","id","title","style","type","onChange","markComplete","bind","btnStyle","onClick","delTodo","Component","background","color","border","borderRadius","cursor","float","outline","Todos","todos","map","key","AddTodo","state","e","setState","target","name","value","onSubmit","preventDefault","addTodo","display","placeholder","flex","className","headerStyle","textAlign","linkStyle","Header","to","About","Fragment","App","axios","delete","then","res","filter","post","data","get","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.254c8c92.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport class TodoItem extends Component {\r\n  getStyle = () => {\r\n    return {\r\n      backgroundColor: \"#f4f4f4\",\r\n      padding: \"10px\",\r\n      borderBottom: \"1px #ccc dotted\",\r\n      textDecoration: this.props.todo.completed ? \"line-through\" : \"none\"\r\n    };\r\n  };\r\n\r\n  render() {\r\n    const { id, title } = this.props.todo;\r\n    return (\r\n      <div style={this.getStyle()}>\r\n        <p>\r\n          <input\r\n            type=\"checkbox\"\r\n            onChange={this.props.markComplete.bind(this, id)}\r\n          />{\" \"}\r\n          {/* same thing but without using const ^ {this.props.todo.title} */}\r\n          {title}\r\n          <button style={btnStyle} onClick={this.props.delTodo.bind(this, id)}>\r\n            x\r\n          </button>\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nTodoItem.propTypes = {\r\n  todo: PropTypes.object.isRequired,\r\n  markComplete: PropTypes.func.isRequired,\r\n  delTodo: PropTypes.func.isRequired\r\n};\r\n\r\nconst btnStyle = {\r\n  background: \"#f00\",\r\n  color: \"#fff\",\r\n  border: \"none\",\r\n  padding: \"5px 10px\",\r\n  borderRadius: \"50%\",\r\n  cursor: \"pointer\",\r\n  float: \"right\",\r\n  outline: \"none\"\r\n};\r\n\r\nexport default TodoItem;\r\n","import React, { Component } from \"react\";\r\nimport TodoItem from \"./TodoItem\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Todos extends Component {\r\n  render() {\r\n    return this.props.todos.map(todo => (\r\n      <TodoItem\r\n        key={todo.id}\r\n        todo={todo}\r\n        markComplete={this.props.markComplete}\r\n        delTodo={this.props.delTodo}\r\n      />\r\n    ));\r\n  }\r\n}\r\n\r\nTodos.propTypes = {\r\n  todos: PropTypes.array.isRequired,\r\n  markComplete: PropTypes.func.isRequired,\r\n  delTodo: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Todos;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport class AddTodo extends Component {\r\n  state = {\r\n    // intialize the state\r\n    title: \"\"\r\n  };\r\n\r\n  //onChange = e => this.setState({ title: e.target.value });\r\n  // use the targets name=\"title\" instead of specifying, enables reusability for other fields\r\n  onChange = e => this.setState({ [e.target.name]: e.target.value });\r\n\r\n  onSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.addTodo(this.state.title);\r\n\r\n    // clear field\r\n    this.setState({ title: \"\" });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.onSubmit} style={{ display: \"flex\" }}>\r\n        <input\r\n          type=\"text\"\r\n          name=\"title\"\r\n          placeholder=\"Add Todo ...\"\r\n          value={this.state.title}\r\n          onChange={this.onChange}\r\n          style={{ flex: \"9\", padding: \"5px\" }}\r\n        />\r\n        <input\r\n          type=\"submit\"\r\n          value=\"Submit\"\r\n          className=\"btn\"\r\n          style={{ flex: \"1\" }}\r\n        />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nAddTodo.propTypes = {\r\n  addTodo: PropTypes.func.isRequired\r\n};\r\n\r\nexport default AddTodo;\r\n","import React from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <header style={headerStyle}>\r\n      <h1>Todo List</h1>\r\n      <Link style={linkStyle} to=\"/\">\r\n        Home\r\n      </Link>{\" \"}\r\n      |{\" \"}\r\n      <Link style={linkStyle} to=\"/about\">\r\n        About\r\n      </Link>\r\n    </header>\r\n  );\r\n}\r\n\r\nconst headerStyle = {\r\n  background: \"#333\",\r\n  color: \"#fff\",\r\n  textAlign: \"center\",\r\n  padding: \"10px\"\r\n};\r\n\r\nconst linkStyle = {\r\n  color: \"white\"\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nconst About = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <h1>About Page</h1>\r\n      <p>This is a todolist app made using react</p>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default About;\r\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Todos from \"./components/Todos\";\nimport AddTodo from \"./components/AddTodo\";\nimport Header from \"./components/layout/Header\";\n\nimport About from \"./components/pages/About\";\nimport \"./App.css\";\nimport uuid from \"uuid\";\nimport axios from \"axios\";\n\nclass App extends Component {\n  state = {\n    todos: []\n  };\n\n  async componentDidMount() {\n    const res = await axios.get(\n      \"http://jsonplaceholder.typicode.com/todos?_limit=10\"\n    );\n    this.setState({ todos: res.data });\n  }\n  markComplete = id => {\n    this.setState({\n      todos: this.state.todos.map(todo => {\n        if (todo.id === id) {\n          todo.completed = !todo.completed;\n        }\n        return todo;\n      })\n    });\n  };\n\n  delTodo = id => {\n    axios.delete(`http://jsonplaceholder.typicode.com/todos/${id}`).then(res =>\n      this.setState({\n        todos: [...this.state.todos.filter(todo => todo.id !== id)]\n      })\n    );\n  };\n\n  addTodo = title => {\n    axios\n      .post(\"http://jsonplaceholder.typicode.com/todos\", {\n        title,\n        completed: false\n      })\n      .then(res =>\n        this.setState({\n          todos: [...this.state.todos, res.data]\n        })\n      );\n  };\n\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <Header />\n          <Route\n            exact\n            path=\"/\"\n            render={props => (\n              <React.Fragment>\n                <AddTodo addTodo={this.addTodo} />\n                <Todos\n                  todos={this.state.todos}\n                  markComplete={this.markComplete}\n                  delTodo={this.delTodo}\n                />\n              </React.Fragment>\n            )}\n          />\n\n          <Route path=\"/about\" component={About} />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}